// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  avatar    String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  profile   UserProfile?
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  wishlist  WishlistItem[]
  cartItems CartItem[]

  @@map("users")
}

// 用户档案
model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String?
  lastName    String?
  phone       String?
  dateOfBirth DateTime?
  gender      Gender?
  locale      String    @default("zh-CN")
  timezone    String    @default("Asia/Shanghai")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// 地址模型
model Address {
  id           String      @id @default(cuid())
  userId       String
  type         AddressType @default(SHIPPING)
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("OrderShippingAddress")
  billingOrders  Order[] @relation("OrderBillingAddress")

  @@map("addresses")
}

// 商品分类
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

// 品牌模型
model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("brands")
}

// 商品模型
model Product {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String?
  shortDesc       String?
  sku             String        @unique
  price           Decimal       @db.Decimal(10, 2)
  comparePrice    Decimal?      @db.Decimal(10, 2)
  currency        String        @default("USD")
  weight          Decimal?      @db.Decimal(8, 2)
  dimensions      String?
  categoryId      String
  brandId         String?
  status          ProductStatus @default(DRAFT)
  isDigital       Boolean       @default(false)
  trackInventory  Boolean       @default(true)
  allowOutOfStock Boolean       @default(false)
  metaTitle       String?
  metaDesc        String?
  tags            String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  category      Category         @relation(fields: [categoryId], references: [id])
  brand         Brand?           @relation(fields: [brandId], references: [id])
  images        ProductImage[]
  variants      ProductVariant[]
  inventory     Inventory?
  reviews       Review[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]

  @@map("products")
}

// 商品图片
model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// 商品变体
model ProductVariant {
  id           String   @id @default(cuid())
  productId    String
  name         String
  sku          String   @unique
  price        Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  weight       Decimal? @db.Decimal(8, 2)
  isActive     Boolean  @default(true)
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  product     Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes  VariantAttribute[]
  inventory   Inventory?
  orderItems  OrderItem[]
  cartItems   CartItem[]

  @@map("product_variants")
}

// 变体属性
model VariantAttribute {
  id        String   @id @default(cuid())
  variantId String
  name      String
  value     String
  createdAt DateTime @default(now())

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([variantId, name])
  @@map("variant_attributes")
}

// 库存管理
model Inventory {
  id                String   @id @default(cuid())
  productId         String?  @unique
  variantId         String?  @unique
  quantity          Int      @default(0)
  reservedQuantity  Int      @default(0)
  lowStockThreshold Int      @default(10)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  product Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

// 订单模型
model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  userId            String
  status            OrderStatus @default(PENDING)
  currency          String      @default("USD")
  subtotal          Decimal     @db.Decimal(10, 2)
  taxAmount         Decimal     @db.Decimal(10, 2) @default(0)
  shippingAmount    Decimal     @db.Decimal(10, 2) @default(0)
  discountAmount    Decimal     @db.Decimal(10, 2) @default(0)
  totalAmount       Decimal     @db.Decimal(10, 2)
  shippingAddressId String?
  billingAddressId  String?
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user            User          @relation(fields: [userId], references: [id])
  shippingAddress Address?      @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?      @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]
  shipments       Shipment[]

  @@map("orders")
}

// 订单项
model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  productId       String?
  variantId       String?
  quantity        Int
  unitPrice       Decimal  @db.Decimal(10, 2)
  totalPrice      Decimal  @db.Decimal(10, 2)
  productSnapshot Json // 保存下单时的商品信息
  createdAt       DateTime @default(now())

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product?        @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// 支付记录
model Payment {
  id                    String        @id @default(cuid())
  orderId               String
  paymentMethod         PaymentMethod
  provider              String // stripe, paypal, etc.
  providerTransactionId String?
  amount                Decimal       @db.Decimal(10, 2)
  currency              String
  status                PaymentStatus @default(PENDING)
  metadata              Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// 物流信息
model Shipment {
  id             String         @id @default(cuid())
  orderId        String
  trackingNumber String?
  carrier        String?
  method         String?
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

// 商品评价
model Review {
  id          String   @id @default(cuid())
  productId   String
  userId      String
  rating      Int // 1-5 stars
  title       String?
  content     String?
  images      String[]
  isVerified  Boolean  @default(false)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}

// 心愿单
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// 购物车
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  variantId String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant?  @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

// 优惠券模型
model Coupon {
  id               String      @id @default(cuid())
  code             String      @unique
  name             String
  description      String?
  type             CouponType
  value            Decimal     @db.Decimal(10, 2)
  minimumAmount    Decimal?    @db.Decimal(10, 2)
  usageLimit       Int?
  usageCount       Int         @default(0)
  isActive         Boolean     @default(true)
  startsAt         DateTime?
  expiresAt        DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@map("coupons")
}

// 枚举类型
enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AddressType {
  SHIPPING
  BILLING
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  APPLE_PAY
  GOOGLE_PAY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}
